#!/usr/bin/env ruby

require 'optparse'
require 'shellwords'

require 'taglib'

VERSION = [1, 3, 0]

FIELDS = [
  ['l', 'album',   String],
  ['r', 'artist',  String],
  ['c', 'comment', String],
  ['g', 'genre',   String],
  ['t', 'title',   String],
  ['n', 'track',   Integer],
  ['y', 'year',    Integer],
]

actions = []
extract_spec = rename_spec = nil
$status = 0

options = OptionParser.new do |opts|
  opts.banner += " file ..."

  opts.separator ""
  opts.separator "Tag options:"

  FIELDS.each do |f|
    short = "-#{f[0]}#{f[1].upcase}"
    long = "--#{f[1]} #{f[1].upcase}"
    opts.on(short, long, String, "Set #{f[1]} tag") do |x|
      begin
        value = f[2] == Integer ? Integer(x, 10) : x
      rescue ArgumentError => err
        warn(err)
        exit(1)
      end
      actions << ->(r) { r.send("#{f[1]}=", value) }
    end
  end
  FIELDS.each do |f|
    long = "--no-#{f[1]}"
    opts.on(long, "Clear #{f[1]} tag") do
      actions << ->(r) { r.send("#{f[1]}=", f[2] == String ? nil : 0) }
    end
  end
  opts.on("--clear", "Clear all tags") do
    FIELDS.each do |f|
      actions << ->(r) { r.send("#{f[1]}=", f[2] == String ? nil : 0) }
    end
  end

  opts.separator ""
  opts.separator "Filename options:"

  opts.on("--extract SPEC", String, "Extract tags from filename") do |spec|
    extract_spec = spec
  end
  opts.on("--rename SPEC", String, "Rename file based on tags") do |spec|
    rename_spec = spec
  end

  opts.separator ""
  opts.separator "If no options are given, file tags are printed instead."
  opts.separator ""
  opts.separator "In a filename spec, a sequence such as %R or %r stands for"
  opts.separator "the corresponding tag, in this case the artist name. In a"
  opts.separator "filename, %R leaves letter case intact, while %r downcases"
  opts.separator "the tag. A sequence such as %_t maps special characters in"
  opts.separator "the tag to the given substitute, in this case an underscore."
  opts.separator ""
  opts.separator "Other options:"

  opts.on_tail("-h", "--help", "Show this message and exit") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Show version and exit") do
    puts "taffy #{VERSION.join('.')}"
    exit
  end
end

begin
  options.parse!
rescue OptionParser::ParseError => err
  warn(err)
  exit(1)
end

if ARGV.empty?
  puts options
  exit(1)
end

def print_info(filename, tag)
  puts filename

  FIELDS.each do |f|
    value = tag.send(f[1])
    puts "#{f[1]}:#{' ' * (8 - f[1].size)}#{value}" if value && value != 0
  end

  puts
end

def extract(tag, spec, filename)
  name = File.basename(filename)
  name = name.slice(0, name.size - File.extname(name).size)
  regexp = Regexp.new(spec.gsub(/%(\W|_)?([lrcgt])/, '(.+)').
                           gsub(/%(\W|_)?([ny])/, '(\d+)'))
  if filematch = regexp.match(name)
    i = 1
    loop do
      specmatch = /%(?:\W|_)?([lrcgtny])/.match(spec)
      break unless specmatch
      FIELDS.each do |f|
        next if f[0] != specmatch[1]
        val = 'ny'.include?(f[0]) ? filematch[i].to_i : filematch[i]
        tag.send("#{f[1]}=", val)
      end
      spec = specmatch.post_match
      i += 1
    end
  else
    warn("#{filename} did not match extraction spec")
    $status = 2
  end
end

def rename(tag, spec)
  spec = spec.dup

  FIELDS.each do |f|
    tag_string = tag.send(f[1]).to_s
    tag_string = tag_string.rjust(2, '0') if f[1] == 'track'
    spec.gsub!(/%(\W|_)?(#{f[0]}|#{f[0].upcase})/) do |match|
      sub = $2 == f[0] ? tag_string.downcase : tag_string
      match.size == 3 ? sub.shellescape.gsub(/\\./, $1) : sub
    end
  end

  spec
end

ARGV.each do |filename|
  TagLib::FileRef.open(filename) do |fileref|
    if fileref.null?
      warn("Could not open file: #{filename}")
      $status = 2
      next
    end

    if extract_spec
      extract(fileref.tag, extract_spec, filename)
      fileref.save
    end

    if actions.empty? and !(extract_spec or rename_spec)
      print_info(filename, fileref.tag)
    elsif !actions.empty?
      actions.each { |action| action.call(fileref.tag) }
      fileref.save
    end

    if rename_spec
      name = rename(fileref.tag, rename_spec) + File.extname(filename)
      name.gsub!('/', '-') # problematic on unix
      name.gsub!(':', '')  # problematic on windows
      path = File.join(File.dirname(filename), name)
      if File.exist?(path)
        warn("Cannot rename; file exists: #{name}")
        $status = 2
      else
        File.rename(filename, path)
      end
    end
  end
end

exit($status)
